// Code generated by MockGen. DO NOT EDIT.
// Source: services.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	reflect "reflect"

	pkg "git.iu7.bmstu.ru/mis21u869/PPO/-/tree/lab3/pkg"
	gomock "github.com/golang/mock/gomock"
)

// MockIUser is a mock of IUser interface.
type MockIUser struct {
	ctrl     *gomock.Controller
	recorder *MockIUserMockRecorder
}

// MockIUserMockRecorder is the mock recorder for MockIUser.
type MockIUserMockRecorder struct {
	mock *MockIUser
}

// NewMockIUser creates a new mock instance.
func NewMockIUser(ctrl *gomock.Controller) *MockIUser {
	mock := &MockIUser{ctrl: ctrl}
	mock.recorder = &MockIUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIUser) EXPECT() *MockIUserMockRecorder {
	return m.recorder
}

// CheckUser mocks base method.
func (m *MockIUser) CheckUser(user pkg.User) (bool, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckUser", user)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// CheckUser indicates an expected call of CheckUser.
func (mr *MockIUserMockRecorder) CheckUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckUser", reflect.TypeOf((*MockIUser)(nil).CheckUser), user)
}

// CreateUser mocks base method.
func (m *MockIUser) CreateUser(user pkg.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockIUserMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockIUser)(nil).CreateUser), user)
}

// MockIHome is a mock of IHome interface.
type MockIHome struct {
	ctrl     *gomock.Controller
	recorder *MockIHomeMockRecorder
}

// MockIHomeMockRecorder is the mock recorder for MockIHome.
type MockIHomeMockRecorder struct {
	mock *MockIHome
}

// NewMockIHome creates a new mock instance.
func NewMockIHome(ctrl *gomock.Controller) *MockIHome {
	mock := &MockIHome{ctrl: ctrl}
	mock.recorder = &MockIHomeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHome) EXPECT() *MockIHomeMockRecorder {
	return m.recorder
}

// CreateHome mocks base method.
func (m *MockIHome) CreateHome(idUser int, home pkg.Home) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateHome", idUser, home)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateHome indicates an expected call of CreateHome.
func (mr *MockIHomeMockRecorder) CreateHome(idUser, home interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateHome", reflect.TypeOf((*MockIHome)(nil).CreateHome), idUser, home)
}

// DeleteHome mocks base method.
func (m *MockIHome) DeleteHome(idUser int, home pkg.Home) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHome", idUser, home)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHome indicates an expected call of DeleteHome.
func (mr *MockIHomeMockRecorder) DeleteHome(idUser, home interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHome", reflect.TypeOf((*MockIHome)(nil).DeleteHome), idUser, home)
}

// UpdateHome mocks base method.
func (m *MockIHome) UpdateHome(idUser int, home pkg.Home) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHome", idUser, home)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHome indicates an expected call of UpdateHome.
func (mr *MockIHomeMockRecorder) UpdateHome(idUser, home interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHome", reflect.TypeOf((*MockIHome)(nil).UpdateHome), idUser, home)
}

// MockIAccessHome is a mock of IAccessHome interface.
type MockIAccessHome struct {
	ctrl     *gomock.Controller
	recorder *MockIAccessHomeMockRecorder
}

// MockIAccessHomeMockRecorder is the mock recorder for MockIAccessHome.
type MockIAccessHomeMockRecorder struct {
	mock *MockIAccessHome
}

// NewMockIAccessHome creates a new mock instance.
func NewMockIAccessHome(ctrl *gomock.Controller) *MockIAccessHome {
	mock := &MockIAccessHome{ctrl: ctrl}
	mock.recorder = &MockIAccessHomeMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIAccessHome) EXPECT() *MockIAccessHomeMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockIAccessHome) AddUser(access pkg.AccessHome) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", access)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockIAccessHomeMockRecorder) AddUser(access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockIAccessHome)(nil).AddUser), access)
}

// DeleteUser mocks base method.
func (m *MockIAccessHome) DeleteUser(idUser int, access pkg.AccessHome) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", idUser, access)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockIAccessHomeMockRecorder) DeleteUser(idUser, access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockIAccessHome)(nil).DeleteUser), idUser, access)
}

// GetListUserHome mocks base method.
func (m *MockIAccessHome) GetListUserHome(homeId int, access pkg.AccessHome) ([]pkg.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListUserHome", homeId, access)
	ret0, _ := ret[0].([]pkg.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListUserHome indicates an expected call of GetListUserHome.
func (mr *MockIAccessHomeMockRecorder) GetListUserHome(homeId, access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListUserHome", reflect.TypeOf((*MockIAccessHome)(nil).GetListUserHome), homeId, access)
}

// UpdateLevel mocks base method.
func (m *MockIAccessHome) UpdateLevel(idUser int, access pkg.AccessHome) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLevel", idUser, access)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLevel indicates an expected call of UpdateLevel.
func (mr *MockIAccessHomeMockRecorder) UpdateLevel(idUser, access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLevel", reflect.TypeOf((*MockIAccessHome)(nil).UpdateLevel), idUser, access)
}

// UpdateStatus mocks base method.
func (m *MockIAccessHome) UpdateStatus(idUser int, access pkg.AccessHome) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatus", idUser, access)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatus indicates an expected call of UpdateStatus.
func (mr *MockIAccessHomeMockRecorder) UpdateStatus(idUser, access interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatus", reflect.TypeOf((*MockIAccessHome)(nil).UpdateStatus), idUser, access)
}

// MockIDevice is a mock of IDevice interface.
type MockIDevice struct {
	ctrl     *gomock.Controller
	recorder *MockIDeviceMockRecorder
}

// MockIDeviceMockRecorder is the mock recorder for MockIDevice.
type MockIDeviceMockRecorder struct {
	mock *MockIDevice
}

// NewMockIDevice creates a new mock instance.
func NewMockIDevice(ctrl *gomock.Controller) *MockIDevice {
	mock := &MockIDevice{ctrl: ctrl}
	mock.recorder = &MockIDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIDevice) EXPECT() *MockIDeviceMockRecorder {
	return m.recorder
}

// AddHomeDevice mocks base method.
func (m *MockIDevice) AddHomeDevice(idHome, idDevice int, input pkg.Devices) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddHomeDevice", idHome, idDevice, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddHomeDevice indicates an expected call of AddHomeDevice.
func (mr *MockIDeviceMockRecorder) AddHomeDevice(idHome, idDevice, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddHomeDevice", reflect.TypeOf((*MockIDevice)(nil).AddHomeDevice), idHome, idDevice, input)
}

// CreateDevice mocks base method.
func (m *MockIDevice) CreateDevice(device pkg.Devices) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDevice", device)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDevice indicates an expected call of CreateDevice.
func (mr *MockIDeviceMockRecorder) CreateDevice(device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDevice", reflect.TypeOf((*MockIDevice)(nil).CreateDevice), device)
}

// DeleteDevice mocks base method.
func (m *MockIDevice) DeleteDevice(idDevice int, device pkg.Devices) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDevice", idDevice, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDevice indicates an expected call of DeleteDevice.
func (mr *MockIDeviceMockRecorder) DeleteDevice(idDevice, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDevice", reflect.TypeOf((*MockIDevice)(nil).DeleteDevice), idDevice, device)
}

// DeleteHomeDevice mocks base method.
func (m *MockIDevice) DeleteHomeDevice(idHome, idDevice int, input pkg.Devices) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHomeDevice", idHome, idDevice, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHomeDevice indicates an expected call of DeleteHomeDevice.
func (mr *MockIDeviceMockRecorder) DeleteHomeDevice(idHome, idDevice, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHomeDevice", reflect.TypeOf((*MockIDevice)(nil).DeleteHomeDevice), idHome, idDevice, input)
}

// UpdateDevice mocks base method.
func (m *MockIDevice) UpdateDevice(idDevice int, device pkg.Devices) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDevice", idDevice, device)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDevice indicates an expected call of UpdateDevice.
func (mr *MockIDeviceMockRecorder) UpdateDevice(idDevice, device interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDevice", reflect.TypeOf((*MockIDevice)(nil).UpdateDevice), idDevice, device)
}

// MockIHistoryDevice is a mock of IHistoryDevice interface.
type MockIHistoryDevice struct {
	ctrl     *gomock.Controller
	recorder *MockIHistoryDeviceMockRecorder
}

// MockIHistoryDeviceMockRecorder is the mock recorder for MockIHistoryDevice.
type MockIHistoryDeviceMockRecorder struct {
	mock *MockIHistoryDevice
}

// NewMockIHistoryDevice creates a new mock instance.
func NewMockIHistoryDevice(ctrl *gomock.Controller) *MockIHistoryDevice {
	mock := &MockIHistoryDevice{ctrl: ctrl}
	mock.recorder = &MockIHistoryDeviceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIHistoryDevice) EXPECT() *MockIHistoryDeviceMockRecorder {
	return m.recorder
}

// CreateDeviceHistory mocks base method.
func (m *MockIHistoryDevice) CreateDeviceHistory(history pkg.DevicesHistory) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDeviceHistory", history)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDeviceHistory indicates an expected call of CreateDeviceHistory.
func (mr *MockIHistoryDeviceMockRecorder) CreateDeviceHistory(history interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDeviceHistory", reflect.TypeOf((*MockIHistoryDevice)(nil).CreateDeviceHistory), history)
}

// GetDeviceHistory mocks base method.
func (m *MockIHistoryDevice) GetDeviceHistory(idDevice int) ([]pkg.DevicesHistory, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDeviceHistory", idDevice)
	ret0, _ := ret[0].([]pkg.DevicesHistory)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDeviceHistory indicates an expected call of GetDeviceHistory.
func (mr *MockIHistoryDeviceMockRecorder) GetDeviceHistory(idDevice interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDeviceHistory", reflect.TypeOf((*MockIHistoryDevice)(nil).GetDeviceHistory), idDevice)
}

// UpdateDeviceHistory mocks base method.
func (m *MockIHistoryDevice) UpdateDeviceHistory(idDevice int, input pkg.DevicesHistory) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeviceHistory", idDevice, input)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateDeviceHistory indicates an expected call of UpdateDeviceHistory.
func (mr *MockIHistoryDeviceMockRecorder) UpdateDeviceHistory(idDevice, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeviceHistory", reflect.TypeOf((*MockIHistoryDevice)(nil).UpdateDeviceHistory), idDevice, input)
}
